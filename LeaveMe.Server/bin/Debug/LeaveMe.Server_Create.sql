/*
Deployment script for LeaveSys

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LeaveSys"
:setvar DefaultFilePrefix "LeaveSys"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Log4Net_Error]...';


GO
CREATE TABLE [dbo].[Log4Net_Error] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Date]      DATETIME       NOT NULL,
    [Thread]    VARCHAR (255)  NOT NULL,
    [Level]     VARCHAR (50)   NOT NULL,
    [Logger]    VARCHAR (255)  NOT NULL,
    [Message]   VARCHAR (4000) NOT NULL,
    [Exception] VARCHAR (2000) NULL,
    CONSTRAINT [PK_Log4Net_Error] PRIMARY KEY CLUSTERED ([Id] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[UsersLeaveApply]...';


GO
CREATE TABLE [dbo].[UsersLeaveApply] (
    [Id]            INT              IDENTITY (1, 1) NOT NULL,
    [UserID]        UNIQUEIDENTIFIER NOT NULL,
    [LeaveTypeID]   INT              NOT NULL,
    [LeaveFromDate] DATETIME         NOT NULL,
    [LeaveToDate]   DATETIME         NOT NULL,
    [ApprovedDays]  INT              NULL,
    [ApprovedBy]    UNIQUEIDENTIFIER NULL,
    [ApprovedDate]  DATETIME         NULL,
    [Reason]        VARCHAR (MAX)    NOT NULL,
    [IsApproved]    BIT              NOT NULL,
    [IsActive]      BIT              NULL,
    [CreatedBy]     UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]     UNIQUEIDENTIFIER NULL,
    [CreatedDate]   DATETIME         NOT NULL,
    [UpdatedDate]   DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UsersDocuments]...';


GO
CREATE TABLE [dbo].[UsersDocuments] (
    [DocumentID]     UNIQUEIDENTIFIER NOT NULL,
    [UserID]         UNIQUEIDENTIFIER NOT NULL,
    [DocumentName]   NVARCHAR (250)   NULL,
    [DocumentTypeID] INT              NOT NULL,
    [StorePath]      NVARCHAR (MAX)   NOT NULL,
    [IsActive]       BIT              NULL,
    [CreatedBy]      UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]      UNIQUEIDENTIFIER NULL,
    [CreatedDate]    DATETIME         NOT NULL,
    [UpdatedDate]    DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([DocumentID] ASC)
);


GO
PRINT N'Creating [dbo].[UsersExperience]...';


GO
CREATE TABLE [dbo].[UsersExperience] (
    [Id]          INT              IDENTITY (1, 1) NOT NULL,
    [UserID]      UNIQUEIDENTIFIER NOT NULL,
    [WorkTitle]   NVARCHAR (150)   NOT NULL,
    [Company]     NVARCHAR (150)   NOT NULL,
    [FromDate]    DATETIME         NOT NULL,
    [ToDate]      DATETIME         NOT NULL,
    [Comments]    NVARCHAR (500)   NULL,
    [IsActive]    BIT              NULL,
    [CreatedBy]   UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]   UNIQUEIDENTIFIER NULL,
    [CreatedDate] DATETIME         NOT NULL,
    [UpdatedDate] DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[WorkTitles]...';


GO
CREATE TABLE [dbo].[WorkTitles] (
    [ID]              INT              IDENTITY (1, 1) NOT NULL,
    [WorkTitle]       NVARCHAR (500)   NULL,
    [WorkDescription] NVARCHAR (800)   NULL,
    [IsActive]        BIT              NULL,
    [CreatedBy]       UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]       UNIQUEIDENTIFIER NULL,
    [CreatedDate]     DATETIME         NOT NULL,
    [UpdatedDate]     DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [CK_WorkTitles_WorkTitle] UNIQUE NONCLUSTERED ([WorkTitle] ASC)
);


GO
PRINT N'Creating [dbo].[UsersWork]...';


GO
CREATE TABLE [dbo].[UsersWork] (
    [Id]          INT              IDENTITY (1, 1) NOT NULL,
    [UserID]      UNIQUEIDENTIFIER NOT NULL,
    [WorkTitle]   NVARCHAR (150)   NOT NULL,
    [JoinDate]    DATETIME         NOT NULL,
    [Loction]     NVARCHAR (150)   NOT NULL,
    [IsActive]    BIT              NULL,
    [CreatedBy]   UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]   UNIQUEIDENTIFIER NULL,
    [CreatedDate] DATETIME         NOT NULL,
    [UpdatedDate] DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [FK_RoleName_ToUser] UNIQUE NONCLUSTERED ([WorkTitle] ASC)
);


GO
PRINT N'Creating [dbo].[UsersProfile]...';


GO
CREATE TABLE [dbo].[UsersProfile] (
    [Id]                INT              IDENTITY (1, 1) NOT NULL,
    [UserID]            UNIQUEIDENTIFIER NOT NULL,
    [FirstName]         NVARCHAR (150)   NOT NULL,
    [MiddleName]        NVARCHAR (150)   NULL,
    [LastName]          NVARCHAR (150)   NOT NULL,
    [DisplayID]         NVARCHAR (150)   NULL,
    [Gender]            BIT              NULL,
    [DOB]               DATETIME         NULL,
    [WorkTitleID]       INT              NULL,
    [DOJ]               DATETIME         NULL,
    [MartialStatus]     INT              NULL,
    [Address]           NVARCHAR (800)   NULL,
    [City]              NVARCHAR (150)   NULL,
    [State]             NVARCHAR (150)   NULL,
    [ZipCode]           NVARCHAR (10)    NULL,
    [Country]           NVARCHAR (150)   NULL,
    [Mobile]            NVARCHAR (20)    NULL,
    [OtherEmailAddress] NVARCHAR (250)   NULL,
    [IsActive]          BIT              NULL,
    [CreatedBy]         UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]         UNIQUEIDENTIFIER NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [UpdatedDate]       DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UsersRole]...';


GO
CREATE TABLE [dbo].[UsersRole] (
    [ID]          INT              IDENTITY (1, 1) NOT NULL,
    [UserID]      UNIQUEIDENTIFIER NOT NULL,
    [RoleID]      INT              NOT NULL,
    [IsActive]    BIT              NOT NULL,
    [CreatedBy]   UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]   UNIQUEIDENTIFIER NULL,
    [CreatedDate] DATETIME         NOT NULL,
    [UpdatedDate] DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[UsersEmergencyContact]...';


GO
CREATE TABLE [dbo].[UsersEmergencyContact] (
    [Id]           INT              IDENTITY (1, 1) NOT NULL,
    [UserID]       UNIQUEIDENTIFIER NOT NULL,
    [Name]         NVARCHAR (150)   NOT NULL,
    [Relationship] NVARCHAR (150)   NOT NULL,
    [Mobile]       NVARCHAR (20)    NOT NULL,
    [WorkMobile]   NVARCHAR (20)    NULL,
    [Notes]        VARCHAR (500)    NULL,
    [IsActive]     BIT              NULL,
    [CreatedBy]    UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]    UNIQUEIDENTIFIER NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [UpdatedDate]  DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UsersEducation]...';


GO
CREATE TABLE [dbo].[UsersEducation] (
    [Id]                   INT              IDENTITY (1, 1) NOT NULL,
    [UserID]               UNIQUEIDENTIFIER NOT NULL,
    [Institute]            NVARCHAR (250)   NOT NULL,
    [CourseSpecialization] NVARCHAR (250)   NOT NULL,
    [GPA]                  DECIMAL (4, 2)   NULL,
    [StartPeriod]          NVARCHAR (10)    NOT NULL,
    [EndPeriod]            NVARCHAR (10)    NOT NULL,
    [Comments]             NVARCHAR (800)   NULL,
    [IsActive]             BIT              NULL,
    [CreatedBy]            UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]            UNIQUEIDENTIFIER NULL,
    [CreatedDate]          DATETIME         NOT NULL,
    [UpdatedDate]          DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UsersReporting]...';


GO
CREATE TABLE [dbo].[UsersReporting] (
    [Id]               INT              IDENTITY (1, 1) NOT NULL,
    [UserID]           UNIQUEIDENTIFIER NOT NULL,
    [RepotingToUserID] UNIQUEIDENTIFIER NOT NULL,
    [IsDirectRepoting] BIT              NOT NULL,
    [IsActive]         BIT              NULL,
    [CreatedBy]        UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]        UNIQUEIDENTIFIER NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [UpdatedDate]      DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [RoleID]          INT              IDENTITY (1, 1) NOT NULL,
    [RoleName]        NVARCHAR (200)   NULL,
    [RoleDescription] NVARCHAR (250)   NULL,
    [IsActive]        BIT              NULL,
    [CreatedBy]       UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]       UNIQUEIDENTIFIER NULL,
    [CreatedDate]     DATETIME         NOT NULL,
    [UpdatedDate]     DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([RoleID] ASC),
    CONSTRAINT [CK_Roles_LeaveTypeName] UNIQUE NONCLUSTERED ([RoleName] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserID]            UNIQUEIDENTIFIER NOT NULL,
    [UserName]          NVARCHAR (50)    NULL,
    [Email]             NVARCHAR (300)   NOT NULL,
    [Password]          NVARCHAR (300)   NULL,
    [AccessFailedCount] INT              NULL,
    [IsLockedOut]       BIT              NULL,
    [IsActive]          BIT              NULL,
    [IsTerminated]      BIT              NULL,
    [TerminatedDate]    DATETIME         NULL,
    [CreatedBy]         UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]         UNIQUEIDENTIFIER NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [UpdatedDate]       DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([UserID] ASC),
    CONSTRAINT [CK_Users_Email] UNIQUE NONCLUSTERED ([Email] ASC)
);


GO
PRINT N'Creating [dbo].[LeaveType]...';


GO
CREATE TABLE [dbo].[LeaveType] (
    [LeaveTypeID]          INT              IDENTITY (1, 1) NOT NULL,
    [LeaveTypeName]        VARCHAR (250)    NOT NULL,
    [LeaveTypeDescription] VARCHAR (500)    NULL,
    [ColorCode]            VARCHAR (8)      NULL,
    [LeaveDays]            INT              NOT NULL,
    [IsActive]             BIT              NULL,
    [CreatedBy]            UNIQUEIDENTIFIER NOT NULL,
    [UpdatedBy]            UNIQUEIDENTIFIER NULL,
    [CreatedDate]          DATETIME         NOT NULL,
    [UpdatedDate]          DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([LeaveTypeID] ASC),
    CONSTRAINT [CK_LeaveType_LeaveTypeName] UNIQUE NONCLUSTERED ([LeaveTypeName] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersLeaveApply]...';


GO
ALTER TABLE [dbo].[UsersLeaveApply]
    ADD DEFAULT 0 FOR [IsApproved];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersLeaveApply]...';


GO
ALTER TABLE [dbo].[UsersLeaveApply]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersLeaveApply]...';


GO
ALTER TABLE [dbo].[UsersLeaveApply]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersDocuments]...';


GO
ALTER TABLE [dbo].[UsersDocuments]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersDocuments]...';


GO
ALTER TABLE [dbo].[UsersDocuments]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersExperience]...';


GO
ALTER TABLE [dbo].[UsersExperience]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersExperience]...';


GO
ALTER TABLE [dbo].[UsersExperience]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[WorkTitles]...';


GO
ALTER TABLE [dbo].[WorkTitles]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[WorkTitles]...';


GO
ALTER TABLE [dbo].[WorkTitles]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersWork]...';


GO
ALTER TABLE [dbo].[UsersWork]
    ADD DEFAULT 0 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersProfile]...';


GO
ALTER TABLE [dbo].[UsersProfile]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersProfile]...';


GO
ALTER TABLE [dbo].[UsersProfile]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersRole]...';


GO
ALTER TABLE [dbo].[UsersRole]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersRole]...';


GO
ALTER TABLE [dbo].[UsersRole]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersEmergencyContact]...';


GO
ALTER TABLE [dbo].[UsersEmergencyContact]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersEmergencyContact]...';


GO
ALTER TABLE [dbo].[UsersEmergencyContact]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersEducation]...';


GO
ALTER TABLE [dbo].[UsersEducation]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersEducation]...';


GO
ALTER TABLE [dbo].[UsersEducation]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersReporting]...';


GO
ALTER TABLE [dbo].[UsersReporting]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[UsersReporting]...';


GO
ALTER TABLE [dbo].[UsersReporting]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Roles]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Roles]...';


GO
ALTER TABLE [dbo].[Roles]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [AccessFailedCount];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [IsLockedOut];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [IsTerminated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[LeaveType]...';


GO
ALTER TABLE [dbo].[LeaveType]
    ADD DEFAULT 0 FOR [LeaveDays];


GO
PRINT N'Creating unnamed constraint on [dbo].[LeaveType]...';


GO
ALTER TABLE [dbo].[LeaveType]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[LeaveType]...';


GO
ALTER TABLE [dbo].[LeaveType]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[FK_LeaveApply_ToUser]...';


GO
ALTER TABLE [dbo].[UsersLeaveApply]
    ADD CONSTRAINT [FK_LeaveApply_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_LeaveApply_ToLeaveType]...';


GO
ALTER TABLE [dbo].[UsersLeaveApply]
    ADD CONSTRAINT [FK_LeaveApply_ToLeaveType] FOREIGN KEY ([LeaveTypeID]) REFERENCES [dbo].[LeaveType] ([LeaveTypeID]);


GO
PRINT N'Creating [dbo].[FK_LeaveApply_ApprovedBy_ToUser]...';


GO
ALTER TABLE [dbo].[UsersLeaveApply]
    ADD CONSTRAINT [FK_LeaveApply_ApprovedBy_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserEducation_ToUserDocuments]...';


GO
ALTER TABLE [dbo].[UsersDocuments]
    ADD CONSTRAINT [FK_UserEducation_ToUserDocuments] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserExperience_ToUser]...';


GO
ALTER TABLE [dbo].[UsersExperience]
    ADD CONSTRAINT [FK_UserExperience_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserWork_ToUser]...';


GO
ALTER TABLE [dbo].[UsersWork]
    ADD CONSTRAINT [FK_UserWork_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserProfile_ToUser]...';


GO
ALTER TABLE [dbo].[UsersProfile]
    ADD CONSTRAINT [FK_UserProfile_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserRole_ToUser]...';


GO
ALTER TABLE [dbo].[UsersRole]
    ADD CONSTRAINT [FK_UserRole_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserRole_ToRole]...';


GO
ALTER TABLE [dbo].[UsersRole]
    ADD CONSTRAINT [FK_UserRole_ToRole] FOREIGN KEY ([RoleID]) REFERENCES [dbo].[Roles] ([RoleID]);


GO
PRINT N'Creating [dbo].[FK_UserEmergencyContact_ToUser]...';


GO
ALTER TABLE [dbo].[UsersEmergencyContact]
    ADD CONSTRAINT [FK_UserEmergencyContact_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserEducation_ToUser]...';


GO
ALTER TABLE [dbo].[UsersEducation]
    ADD CONSTRAINT [FK_UserEducation_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserReporting_ToUser]...';


GO
ALTER TABLE [dbo].[UsersReporting]
    ADD CONSTRAINT [FK_UserReporting_ToUser] FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[FK_UserReporting_RepotingToUserID_ToUser]...';


GO
ALTER TABLE [dbo].[UsersReporting]
    ADD CONSTRAINT [FK_UserReporting_RepotingToUserID_ToUser] FOREIGN KEY ([RepotingToUserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating [dbo].[ufn_WorkTitles_GetWorkTitleByWorkTitleID]...';


GO
CREATE FUNCTION [dbo].[ufn_WorkTitles_GetWorkTitleByWorkTitleID]
(
	@WorkTitleID INT
)
RETURNS VARCHAR(500)
AS
BEGIN
	DECLARE @WorkTitle varchar(500)

	SELECT @WorkTitle = WorkTitle 
	FROM WorkTitles  (nolock)
	WHERE ID = @WorkTitleID

	RETURN @WorkTitle
END
GO
PRINT N'Creating [dbo].[ufn_Roles_GetRoleByRoleID]...';


GO
CREATE FUNCTION [dbo].[ufn_Roles_GetRoleByRoleID]
(
	@RoleID INT
)
RETURNS VARCHAR(500)
AS
BEGIN
	DECLARE @RoleName varchar(500)

	SELECT @RoleName = RoleName 
	FROM Roles  (nolock)
	WHERE RoleID = @RoleID

	RETURN @RoleName
END
GO
PRINT N'Creating [dbo].[ufn_vw_Users_GetByUserID]...';


GO
CREATE FUNCTION [dbo].[ufn_vw_Users_GetByUserID]
(
	@UserID UNIQUEIDENTIFIER
)
RETURNS VARCHAR(500)
AS
BEGIN
	DECLARE @UserDetails varchar(500)

	SELECT @UserDetails = 	CASE WHEN UP.MiddleName IS NULL THEN UP.FirstName+' '+UP.LastName ELSE UP.FirstName+' '+ UP.MiddleName+' '+UP.LastName END
	FROM UsersProfile UP  (nolock)
	WHERE UserID = @UserID

	RETURN @UserDetails
END
GO
PRINT N'Creating [dbo].[vw_Users_Info]...';


GO
CREATE VIEW [dbo].[vw_Users_Info]
	AS 
SELECT US.UserID, US.UserName, US.Email, US.[Password], 
		RS.RoleID,RS.RoleName, 
		UP.FirstName, UP.MiddleName, UP.LastName,
		UP.FirstName +' '+UP.LastName AS 'DisplayName',
		Up.DisplayID,
		US.IsTerminated,US.IsLockedOut,US.IsActive
FROM dbo.Users US
INNER JOIN dbo.UsersRole UR
ON US.UserID = UR.UserID
INNER JOIN UsersProfile UP
ON UP.UserID = US.UserID
INNER JOIN Roles RS 
ON RS.RoleID = UR.RoleID
GO
PRINT N'Creating [dbo].[vw_Users_ViewUsers]...';


GO
CREATE VIEW [dbo].[vw_Users_ViewUsers]
	AS 
 
SELECT US.UserID, US.Email,  
	UP.FirstName,
	ISNULL(UP.MiddleName,'-') AS 'MiddleName',  
	UP.LastName,
	UP.FirstName +' '+UP.LastName AS 'DisplayName',
	ISNULL(Up.DisplayID,'-') AS 'DisplayID', 
	CASE WHEN UP.MiddleName IS NULL THEN UP.FirstName+' '+UP.LastName ELSE UP.FirstName+' '+ UP.MiddleName+' '+UP.LastName END AS 'FullName',
	RS.RoleID,RS.RoleName, 
	UP.WorkTitleID,
	dbo.ufn_WorkTitles_GetWorkTitleByWorkTitleID(UP.WorkTitleID) AS 'WorkTitle',
	ISNULL( CONVERT(VARCHAR(50), UP.DOB,121),'') AS 'DOB',
	ISNULL( CONVERT(VARCHAR(50), UP.DOJ,121),'') AS 'DOJ',
	ISNULL(UP.Mobile,'-') AS 'Mobile',
	ISNULL(UP.OtherEmailAddress,'-') AS 'OtherEmailAddress',
	US.IsActive AS 'IsLoginActive',
	UP.IsActive AS 'IsUserActive'
FROM dbo.Users US
INNER JOIN dbo.UsersRole UR
ON US.UserID = UR.UserID
INNER JOIN UsersProfile UP
ON UP.UserID = US.UserID
INNER JOIN Roles RS 
ON RS.RoleID = UR.RoleID
GO
PRINT N'Creating [dbo].[ups_WorkTitle_GetWorkTitles]...';


GO
CREATE PROCEDURE [dbo].[ups_WorkTitle_GetWorkTitles]
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	SELECT ID,WorkTitle FROM WorkTitles
	WHERE IsActive=1
END
GO
PRINT N'Creating [dbo].[ups_Roles_GetRoles]...';


GO
CREATE PROCEDURE [dbo].[ups_Roles_GetRoles]
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	SELECT RoleID,RoleName,RoleDescription FROM dbo.Roles
	WHERE IsActive=1
END
GO
PRINT N'Creating [dbo].[ups_Users_CreateUser]...';


GO

CREATE PROCEDURE ups_Users_CreateUser	
	 @Email nvarchar(300)
	,@Password nvarchar(300)
	,@CreatedBy uniqueidentifier
	,@FirstName nvarchar(300)
	,@MiddleName nvarchar(300)
	,@LastName nvarchar(300)
	,@WorkTitleID INT
	,@RoleID INT
	
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	
	DECLARE @UserID UNIQUEIDENTIFIER
	SET @UserID = NEWID()

	--- creates users  
	INSERT INTO [dbo].[Users] (UserID,Email,[Password],AccessFailedCount,IsLockedOut,IsActive
		,CreatedBy,CreatedDate)
	VALUES(@UserID,@Email,@Password,0,0,1,@CreatedBy,GETDATE())
    
	---creates UsersProfile
	INSERT INTO [dbo].[UsersProfile] (UserID,FirstName,MiddleName,LastName,WorkTitleID,CreatedBy,CreatedDate,IsActive)
	VALUES(@UserID,@FirstName,@MiddleName,@LastName,@WorkTitleID,@CreatedBy,GETDATE(),1)
	
	---assigns Users Role
	INSERT INTO UsersRole(UserID,RoleID,CreatedBy)
	VALUES (@UserID,@RoleID,@CreatedBy)
END
GO
PRINT N'Creating [dbo].[ups_UsersProfile_UpdateByUserID]...';


GO

CREATE PROCEDURE ups_UsersProfile_UpdateByUserID	
	@UserID  uniqueidentifier ,
	@FirstName VARCHAR(150),
	@MiddleName  VARCHAR(150),
	@LastName  VARCHAR(150),
	@WorkTitleID INT,
	@DOJ DATETIME,
	@DisplayID VARCHAR(150),
	@Gender BIT,
	@DOB DATETIME,
	@MartialStatus INT,
	@Address  VARCHAR(1000),
	@City  VARCHAR(150),
	@State VARCHAR(150),
	@ZipCode  VARCHAR(15),
	@Country VARCHAR(150),
	@Mobile VARCHAR(30),
	@OtherEmailAddress VARCHAR(300),
	@UpdatedBy uniqueidentifier
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	
	UPDATE dbo.[UsersProfile]
	SET
	FirstName =@FirstName,
	MiddleName =@MiddleName,
	LastName=@LastName,
	WorkTitleID=@WorkTitleID,
	DOJ = @DOJ,
	DisplayID=@DisplayID,
	Gender=@Gender,
	DOB=@DOB,
	MartialStatus=@MartialStatus,
	[Address]=@Address,
	City=@City,
	[State]=@State,
	ZipCode=@ZipCode,
	Country=@Country,
	Mobile=@Mobile,
	OtherEmailAddress=@OtherEmailAddress,
	UpdatedBy=@UpdatedBy,
	UpdatedDate = GETDATE()
	WHERE UserID = @UserID 
   
END
GO
PRINT N'Creating [dbo].[ups_UsersProfile_GetByUserID]...';


GO

CREATE PROCEDURE ups_UsersProfile_GetByUserID	
	@UserID  uniqueidentifier 
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	
	SELECT  
	UserID,FirstName,MiddleName,LastName,WorkTitleID, 
	dbo.ufn_WorkTitles_GetWorkTitleByWorkTitleID(WorkTitleID) as 'WorkTitle',
	DisplayID,DOJ,Gender,DOB,MartialStatus,[Address],City,[State],ZipCode,
	Country,Mobile,OtherEmailAddress,IsActive,CreatedBy,UpdatedBy,CreatedDate,UpdatedDate

	FROM dbo.[UsersProfile]
	WHERE UserID = @UserID 
   
END
GO
PRINT N'Creating [dbo].[usp_Users_UserRoles_ByUserID]...';


GO
CREATE PROCEDURE [dbo].[usp_Users_UserRoles_ByUserID]
	@UserID uniqueidentifier
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	SELECT UserID, RoleName FROM vw_Users_Info
END
GO
PRINT N'Creating [dbo].[usp_Users_LoginUserByEmailandPassword]...';


GO

CREATE PROCEDURE usp_Users_LoginUserByEmailandPassword	
	@Email varchar(150),
	@Password varchar(150)
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	
	SELECT 
	UserID, UserName, Email, [Password], RoleName, 
	FirstName, MiddleName, LastName,DisplayName,DisplayID
	FROM dbo.vw_Users_Info 
	WHERE Email = @Email AND [Password]=@Password  
	AND IsTerminated=0 AND IsLockedOut=0 AND IsActive=1
END
GO
PRINT N'Creating [dbo].[usp_Users_GetAllUsers]...';


GO
CREATE PROCEDURE [dbo].[usp_Users_GetAllUsers]
	@IsActive bit = 1
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
	SELECT 
		UserID, Email, FirstName, MiddleName, 
		LastName, DisplayName, DisplayID, RoleID,
		RoleName, WorkTitleID, WorkTitle, DOB,
		DOJ, Mobile, OtherEmailAddress,
		IsLoginActive,IsUserActive
	FROM vw_Users_ViewUsers WHERE IsUserActive=@IsActive

END
GO
PRINT N'Creating [dbo].[usp_UsersExperience_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersExperience_Insert]
@UserID UNIQUEIDENTIFIER,
@WorkTitle NVARCHAR(250),
@Company NVARCHAR(250),
@FromDate DATETIME,
@ToDate DATETIME,
@Comments NVARCHAR(800),
@CreatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	INSERT INTO [dbo].[UsersExperience]
	(UserID,WorkTitle,Company,FromDate,ToDate,Comments,IsActive,CreatedBy,CreatedDate)
	VALUES(@UserID,@WorkTitle,@Company,@FromDate,@ToDate,@Comments,1,@CreatedBy,GETDATE())
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEmergencyContact_GetByID]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEmergencyContact_GetByID]
@ID INT
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	Id,UserID,Name,Relationship,Mobile,WorkMobile,Notes,CreatedBy,CreatedDate,
	UpdatedBy,UpdatedDate,IsActive
	FROM UsersEmergencyContact
	WHERE ID=@ID 
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEmergencyContact_GetByUserID]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEmergencyContact_GetByUserID]
@UserID UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	Id,UserID,Name,Relationship,Mobile,WorkMobile,Notes,CreatedBy,CreatedDate,
	UpdatedBy,UpdatedDate,IsActive
	FROM UsersEmergencyContact
	WHERE UserID=@UserID AND IsActive=1
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEmergencyContact_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEmergencyContact_Insert]
@UserID UNIQUEIDENTIFIER,
@Name NVARCHAR(150),
@Relationship NVARCHAR(150),
@Mobile NVARCHAR(25),
@WorkMobile NVARCHAR(25),
@Notes NVARCHAR(400),
@CreatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	INSERT INTO [dbo].[UsersEmergencyContact]
	(UserID,Name,Relationship,Mobile,WorkMobile,Notes,IsActive,CreatedBy,CreatedDate)
	VALUES(@UserID,@Name,@Relationship,@Mobile,@WorkMobile,@Notes,1,@CreatedBy,GETDATE())
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEmergencyContact_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEmergencyContact_Update]
@Id INT,
@UserID UNIQUEIDENTIFIER,
@Name NVARCHAR(150),
@Relationship NVARCHAR(150),
@Mobile NVARCHAR(25),
@WorkMobile NVARCHAR(25),
@Notes NVARCHAR(400),
@UpdatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE UsersEmergencyContact SET
	Name=@Name,
	Relationship=@Relationship,
	Mobile=@Mobile,
	WorkMobile=@WorkMobile,
	Notes = @Notes,
	UpdatedBy=@UpdatedBy,
	UpdatedDate=GETDATE()
	WHERE Id=@Id AND UserID=@UserID

		
END
GO
PRINT N'Creating [dbo].[usp_UsersExperience_GetByID]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersExperience_GetByID]
@ID INT
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	Id,UserID,WorkTitle,Company,FromDate,ToDate,Comments,IsActive,
	CreatedBy,UpdatedBy,CreatedDate,UpdatedDate FROM UsersExperience
	WHERE ID=@ID 
		
END
GO
PRINT N'Creating [dbo].[usp_UsersExperience_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersExperience_Update]
@Id INT,
@UserID UNIQUEIDENTIFIER,
@WorkTitle NVARCHAR(250),
@Company NVARCHAR(250),
@FromDate DATETIME,
@ToDate DATETIME,
@Comments NVARCHAR(800),
@UpdatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE UsersExperience SET
	WorkTitle=@WorkTitle,
	Company=@Company,
	FromDate=@FromDate,
	ToDate=@ToDate,
	Comments=@Comments,
	UpdatedBy=@UpdatedBy,
	UpdatedDate = GETDATE()
	WHERE Id=@Id AND UserID=@UserID

		
END
GO
PRINT N'Creating [dbo].[usp_UsersExperience_Deactivate]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersExperience_Deactivate]
@Id INT,
@UpdatedBy UNIQUEIDENTIFIER,
@IsActive BIT =0
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE UsersExperience SET
	UpdatedBy=@UpdatedBy,
	UpdatedDate=GETDATE(),
	IsActive=@IsActive
	WHERE Id=@Id 
END
GO
PRINT N'Creating [dbo].[usp_UsersEmergencyContact_Deactivate]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEmergencyContact_Deactivate]
@Id INT,
@UpdatedBy UNIQUEIDENTIFIER,
@IsActive BIT =0
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE UsersEmergencyContact SET
	UpdatedBy=@UpdatedBy,
	UpdatedDate=GETDATE(),
	IsActive=@IsActive
	WHERE Id=@Id 
END
GO
PRINT N'Creating [dbo].[usp_UsersExperience_GetByUserID]...';


GO
CREATE PROCEDURE usp_UsersExperience_GetByUserID
@UserID UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	Id,UserID,WorkTitle,Company,FromDate,ToDate,Comments,IsActive,
	CreatedBy,UpdatedBy,CreatedDate,UpdatedDate FROM UsersExperience
	WHERE UserID=@UserID AND IsActive=1
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEducation_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEducation_Insert]
@UserID UNIQUEIDENTIFIER,
@Institute NVARCHAR(250),
@CourseSpecialization NVARCHAR(250),
@GPA decimal,
@StartPeriod NVARCHAR(10),
@EndPeriod NVARCHAR(10),
@Comments NVARCHAR(800),
@CreatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	INSERT INTO [dbo].[UsersEducation]
	(UserID,Institute,CourseSpecialization,GPA,StartPeriod,EndPeriod,Comments,IsActive,CreatedBy,CreatedDate)
	VALUES(@UserID,@Institute,@CourseSpecialization,@GPA,@StartPeriod,@EndPeriod,@Comments,1,@CreatedBy,GETDATE())
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEducation_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEducation_Update]
@Id INT,
@UserID UNIQUEIDENTIFIER,
@Institute NVARCHAR(250),
@CourseSpecialization NVARCHAR(250),
@GPA decimal,
@StartPeriod NVARCHAR(10),
@EndPeriod NVARCHAR(10),
@Comments NVARCHAR(800),
@UpdatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE UsersEducation SET
	Institute=@Institute,
	CourseSpecialization=@CourseSpecialization,
	GPA=@GPA,
	StartPeriod = @StartPeriod,
	EndPeriod = @EndPeriod,
	UpdatedBy=@UpdatedBy,
	Comments = @Comments,
	UpdatedDate=GETDATE()
	WHERE Id=@Id AND UserID=@UserID

		
END
GO
PRINT N'Creating [dbo].[usp_UsersEducation_GetByUserID]...';


GO
CREATE PROCEDURE usp_UsersEducation_GetByUserID
@UserID UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	Id,UserID,Institute,CourseSpecialization,GPA,StartPeriod,
	EndPeriod,Comments,IsActive,CreatedBy,UpdatedBy,CreatedDate,UpdatedDate
	FROM UsersEducation
	WHERE UserID=@UserID AND IsActive=1
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEducation_GetByID]...';


GO
CREATE PROCEDURE usp_UsersEducation_GetByID
@ID INT
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	Id,UserID,Institute,CourseSpecialization,GPA,StartPeriod,
	EndPeriod,Comments,IsActive,CreatedBy,UpdatedBy,CreatedDate,UpdatedDate
	FROM UsersEducation
	WHERE ID=@ID 
		
END
GO
PRINT N'Creating [dbo].[usp_UsersEducation_Deactivate]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersEducation_Deactivate]
@Id INT,
@UpdatedBy UNIQUEIDENTIFIER,
@IsActive BIT =0
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE UsersEducation SET
	UpdatedBy=@UpdatedBy,
	UpdatedDate=GETDATE(),
	IsActive=@IsActive
	WHERE Id=@Id 
END
GO
PRINT N'Creating [dbo].[usp_UsersReporting_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersReporting_Insert]
@UserID UNIQUEIDENTIFIER,
@RepotingToUserID UNIQUEIDENTIFIER,
@IsDirectRepoting BIT,
@CreatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	INSERT INTO [dbo].[UsersReporting]
	(UserID,RepotingToUserID,IsDirectRepoting,IsActive,CreatedBy,CreatedDate)
	VALUES(@UserID,@RepotingToUserID,@IsDirectRepoting,1,@CreatedBy,GETDATE())
		
END
GO
PRINT N'Creating [dbo].[usp_UsersReporting_GetByRepotingToUserID]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersReporting_GetByRepotingToUserID]
@RepotingToUserID UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT 
	UserID,
	dbo.ufn_vw_Users_GetByUserID(UserID) AS 'UserDisplayName',
	RepotingToUserID,
	dbo.ufn_vw_Users_GetByUserID(RepotingToUserID) AS 'RepotingToUserDisplayName',
	IsDirectRepoting,IsActive,CreatedBy,CreatedDate
	FROM [dbo].[UsersReporting]
	WHERE RepotingToUserID=@RepotingToUserID
	
END
GO
PRINT N'Creating [dbo].[usp_UsersReporting_GetByUserID]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersReporting_GetByUserID]
@UserID UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT 
	UserID,
	dbo.ufn_vw_Users_GetByUserID(UserID) AS 'UserDisplayName',
	RepotingToUserID,
	dbo.ufn_vw_Users_GetByUserID(RepotingToUserID) AS 'RepotingToUserDisplayName',
	IsDirectRepoting,IsActive,CreatedBy,CreatedDate
	FROM [dbo].[UsersReporting] 
	WHERE UserID=@UserID
		
END
GO
PRINT N'Creating [dbo].[usp_UsersReporting_DeletetByUserID]...';


GO
CREATE PROCEDURE [dbo].[usp_UsersReporting_DeletetByUserID]
@UserID UNIQUEIDENTIFIER,
@RepotingToUserID UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	DELETE [dbo].[UsersReporting]
	WHERE UserID =@UserID AND RepotingToUserID=@RepotingToUserID 
		
END
GO
PRINT N'Creating [dbo].[usp_LeaveType_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_LeaveType_Insert]
@LeaveTypeName NVARCHAR(250),
@LeaveTypeDescription NVARCHAR(450),
@ColorCode NVARCHAR(8),
@LeaveDays INT,
@CreatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	INSERT INTO [dbo].[LeaveType]
	(LeaveTypeName,LeaveTypeDescription,ColorCode,LeaveDays,IsActive,CreatedBy,CreatedDate)
	VALUES(@LeaveTypeName,@LeaveTypeDescription,@ColorCode,@LeaveDays,1,@CreatedBy,GETDATE())
		
END
GO
PRINT N'Creating [dbo].[usp_LeaveType_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_LeaveType_Update]
@LeaveTypeID INT,
@LeaveTypeName NVARCHAR(250),
@LeaveTypeDescription NVARCHAR(450),
@ColorCode NVARCHAR(8),
@LeaveDays INT,
@IsActive BIT,
@UpdatedBy UNIQUEIDENTIFIER
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	UPDATE [dbo].[LeaveType]
	SET
	LeaveTypeName = @LeaveTypeName,
	LeaveTypeDescription = @LeaveTypeDescription,
	ColorCode = @ColorCode,
	LeaveDays = @LeaveDays,
	IsActive = @IsActive,
	UpdatedBy = @UpdatedBy,
	UpdatedDate = GETDATE()
	WHERE LeaveTypeID = @LeaveTypeID

END
GO
PRINT N'Creating [dbo].[usp_LeaveType_GetAll]...';


GO
CREATE PROCEDURE [dbo].[usp_LeaveType_GetAll]
@LeaveTypeID INT = 0
AS
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN

	SELECT
	LeaveTypeID,LeaveTypeName,LeaveTypeDescription,ColorCode,LeaveDays,IsActive,CreatedBy,CreatedDate
	,UpdatedBy,UpdatedDate FROM LeaveType
	WHERE LeaveTypeID = CASE WHEN ISNULL(@LeaveTypeID,0) = 0 THEN LeaveTypeID ELSE @LeaveTypeID END
		
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9a7ed9ac-5d16-40e4-a849-e47d59826873')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9a7ed9ac-5d16-40e4-a849-e47d59826873')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4e09836f-3d10-4b82-8666-a81f3bab0083')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4e09836f-3d10-4b82-8666-a81f3bab0083')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '92e780bb-cc38-4f24-827a-670bb86db2fd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('92e780bb-cc38-4f24-827a-670bb86db2fd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '04855231-957e-4481-8472-d24a38c0607e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('04855231-957e-4481-8472-d24a38c0607e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '716fadeb-5791-43cc-aed0-2a34260043c4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('716fadeb-5791-43cc-aed0-2a34260043c4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8716b1c7-89a4-4446-9f81-f1e7e8fb62b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8716b1c7-89a4-4446-9f81-f1e7e8fb62b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '919680f5-1666-48ee-b548-8e41f38ce00e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('919680f5-1666-48ee-b548-8e41f38ce00e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '535c69bd-9170-4b0a-94d8-9aaf6ba75d06')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('535c69bd-9170-4b0a-94d8-9aaf6ba75d06')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '34a1035b-286a-4c4a-bd74-13edc15356cc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('34a1035b-286a-4c4a-bd74-13edc15356cc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd60d7fe1-530b-40a1-9eae-649a7f78b2ec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d60d7fe1-530b-40a1-9eae-649a7f78b2ec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f6f49240-d91d-4708-b3db-526905fbb7e8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f6f49240-d91d-4708-b3db-526905fbb7e8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a54a2dcb-5959-4d2b-9991-ff3497fcb92c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a54a2dcb-5959-4d2b-9991-ff3497fcb92c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd5733967-bfd8-46c8-b618-f679437713ac')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d5733967-bfd8-46c8-b618-f679437713ac')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '41485ca8-c980-4d54-9e7f-03a9c968152a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('41485ca8-c980-4d54-9e7f-03a9c968152a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0e3d6cbe-ee77-49af-864a-2c24b3dd9426')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0e3d6cbe-ee77-49af-864a-2c24b3dd9426')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2cc1723f-f5c5-4dd1-bc65-7010c0856c2b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2cc1723f-f5c5-4dd1-bc65-7010c0856c2b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1156bc50-8658-476b-a169-c2f9a2ddacc4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1156bc50-8658-476b-a169-c2f9a2ddacc4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1cc6a202-53e1-4a1a-8ab6-ba70f582aa41')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1cc6a202-53e1-4a1a-8ab6-ba70f582aa41')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
